{
  "openapi": "3.0.1",
  "info": {
    "title": "Baselined.ai API",
    "description": "Comprehensive API documentation for Baselined.ai endpoints, including image and text AI-generated content detection.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.baselined.ai"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/image": {
      "post": {
        "summary": "Analyze an image to determine if it is AI-generated.",
        "description": "Analyzes an image to determine the confidence that it is AI-generated. You can provide either an `image_url` or a `media` (base64-encoded image), but not both.",
        "operationId": "analyzeImage",
        "tags": ["Image Analysis"],
        "requestBody": {
          "description": "Image to analyze. Provide either `image_url` or `media`.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "required": ["image_url"],
                    "properties": {
                      "image_url": {
                        "type": "string",
                        "format": "uri",
                        "description": "URL of the image to analyze."
                      }
                    }
                  },
                  {
                    "required": ["media"],
                    "properties": {
                      "media": {
                        "type": "string",
                        "description": "Base64-encoded image data."
                      }
                    }
                  }
                ],
                "additionalProperties": false
              },
              "examples": {
                "ImageURL": {
                  "summary": "Provide image URL",
                  "value": {
                    "image_url": "https://example.com/image.jpg"
                  }
                },
                "Media": {
                  "summary": "Provide base64-encoded image",
                  "value": {
                    "media": "iVBORw0KGgoAAAANSUhEUgAA..."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "AI-generated image analysis result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ai_generated_score": {
                      "type": "number",
                      "format": "float",
                      "description": "Confidence score that the image is AI-generated, ranging from 0 to 1."
                    },
                    "media_url": {
                      "type": "string",
                      "format": "uri",
                      "description": "URL of the analyzed image."
                    }
                  }
                },
                "examples": {
                  "Success": {
                    "summary": "Successful response",
                    "value": {
                      "ai_generated_score": 0.85,
                      "media_url": "https://example.com/media/image.jpg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid or missing parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "MissingParameter": {
                    "summary": "Missing required parameter",
                    "value": {
                      "error": {
                        "type": "MissingParameterError",
                        "message": "Either image_url or media is required",
                        "code": 3002
                      }
                    }
                  },
                  "InvalidParameter": {
                    "summary": "Invalid parameter provided",
                    "value": {
                      "error": {
                        "type": "InvalidParameterError",
                        "message": "Provide either image_url or media, not both",
                        "code": 3003
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request due to invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Unauthorized": {
                    "summary": "Invalid API key",
                    "value": {
                      "error": {
                        "type": "UnauthorizedError",
                        "message": "Unauthorized: Invalid API key",
                        "code": 2001
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "InternalError": {
                    "summary": "Internal server error",
                    "value": {
                      "error": {
                        "type": "InternalError",
                        "message": "An unexpected error occurred while processing your request.",
                        "code": 9999
                      }
                    }
                  }
                }
              }
            }
          },
          "504": {
            "description": "Gateway timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "TimeoutError": {
                    "summary": "Request timed out",
                    "value": {
                      "error": {
                        "type": "TimeoutError",
                        "message": "API request timed out",
                        "code": 1005
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/text": {
      "post": {
        "summary": "Analyze text to determine if it is AI-generated.",
        "description": "Analyzes text to determine the confidence that it is AI-generated. You can provide `text`, `file`, or `website`, along with optional parameters like `version`, `sentences`, and `language`. At least one of `text`, `file`, or `website` must be provided. The priority is as follows: `website` > `file` > `text`.",
        "operationId": "analyzeText",
        "tags": ["Text Analysis"],
        "requestBody": {
          "description": "Text to analyze along with optional parameters. Provide either `text`, `file`, or `website`. If multiple are provided, the priority is `website` > `file` > `text`.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "The text content to analyze."
                  },
                  "file": {
                    "type": "string",
                    "description": "A file to scan. If you supply a file, the API will scan the content of the file. The file must be in plain .pdf, .doc or .docx format. The file has priority over the text, so if you give a text and a file, it's the file that will be scanned."
                  },
                  "website": {
                    "type": "string",
                    "format": "uri",
                    "description": "A website URL to scan. If you supply a website, the API will fetch the content of the website and scan it. The website must be publicly accessible. It's important to know that the website has priority over the text and the file, so if you give a text, a file and a website, it's the website that will be scanned."
                  },
                  "version": {
                    "type": "string",
                    "description": "The model version to use. Our latest and most accurate version is \"3.0\". Using \"latest\" will make sure you are always using the latest version. Options: 3.0, 2.0, latest.",
                    "default": "2.0",
                    "enum": ["3.0", "2.0", "latest"]
                  },
                  "sentences": {
                    "type": "boolean",
                    "description": "Whether the response should include an array of sentences and their scores.",
                    "default": true
                  },
                  "language": {
                    "type": "string",
                    "description": "2 letter language code. Available languages: english (en), french (fr), spanish (es), portuguese (pt), netherlands (nl), german (de), and chinese simplified (zh).",
                    "default": "en",
                    "enum": ["en", "fr", "es", "pt", "nl", "de", "zh"]
                  }
                },
                "anyOf": [
                  {
                    "required": ["text"]
                  },
                  {
                    "required": ["file"]
                  },
                  {
                    "required": ["website"]
                  }
                ],
                "additionalProperties": false
              },
              "examples": {
                "Text": {
                  "summary": "Provide text for analysis",
                  "value": {
                    "text": "Your text content here."
                  }
                },
                "File": {
                  "summary": "Provide file for analysis",
                  "value": {
                    "file": "https://example.com/document.pdf"
                  }
                },
                "Website": {
                  "summary": "Provide website URL for analysis",
                  "value": {
                    "website": "https://example.com"
                  }
                },
                "WithOptionalParameters": {
                  "summary": "Provide text with optional parameters",
                  "value": {
                    "text": "Your text content here.",
                    "version": "3.0",
                    "sentences": false,
                    "language": "es"
                  }
                },
                "MultipleInputs": {
                  "summary": "Provide text, file, and website (priority applies)",
                  "value": {
                    "text": "Your text content here.",
                    "file": "https://example.com/document.pdf",
                    "website": "https://example.com",
                    "version": "latest",
                    "sentences": true,
                    "language": "de"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "AI-generated text analysis result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "This is a standard HTTP status code. A 200 status means the request was successful."
                    },
                    "score": {
                      "type": "integer",
                      "description": "A \"human\" score between 0 and 100. A low score means our system believes that the text is written by AI, and a higher score means that the system believes that the text is written by a Human."
                    },
                    "sentences": {
                      "type": "array",
                      "description": "An array of sentence objects. Each object contains two fields: text and score. Please note that assessments on smaller samples are less accurate than the general score.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "The text of the analyzed sentence."
                          },
                          "score": {
                            "type": "integer",
                            "description": "The sentiment score assigned to this sentence by the AI."
                          }
                        }
                      }
                    },
                    "input": {
                      "type": "string",
                      "description": "The type of input scanned based on the input provided. It can be `text`, `file`, or `website`."
                    },
                    "credits_used": {
                      "type": "integer",
                      "description": "The number of credits consumed for processing your request. Each word processed by the API consumes one credit."
                    },
                    "credits_remaining": {
                      "type": "integer",
                      "description": "The number of credits you have left in your account after your request has been processed."
                    }
                  }
                },
                "examples": {
                  "Success": {
                    "summary": "Successful response",
                    "value": {
                      "status": 200,
                      "score": 75,
                      "sentences": [
                        {
                          "text": "This is a sample sentence.",
                          "score": 80
                        },
                        {
                          "text": "Another example sentence.",
                          "score": 70
                        }
                      ],
                      "input": "text",
                      "credits_used": 100,
                      "credits_remaining": 900
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid or missing parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "InvalidRequestFormat": {
                    "summary": "Invalid request format",
                    "value": {
                      "error": {
                        "type": "InvalidRequestFormat",
                        "message": "Invalid request format",
                        "code": 3001
                      }
                    }
                  },
                  "MissingParameter": {
                    "summary": "Missing required parameter",
                    "value": {
                      "error": {
                        "type": "MissingParameterError",
                        "message": "Either text, file, or website is required.",
                        "code": 3002
                      }
                    }
                  },
                  "InvalidParameter": {
                    "summary": "Multiple parameters provided",
                    "value": {
                      "error": {
                        "type": "InvalidParameterError",
                        "message": "Provide either text, file, or website, not multiple.",
                        "code": 3003
                      }
                    }
                  },
                  "InvalidImageData": {
                    "summary": "Invalid image data provided",
                    "value": {
                      "error": {
                        "type": "InvalidImageData",
                        "message": "The provided media data is not valid base64-encoded image data.",
                        "code": 3004
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request due to invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Unauthorized": {
                    "summary": "Invalid API key",
                    "value": {
                      "error": {
                        "type": "UnauthorizedError",
                        "message": "Unauthorized: Invalid API key",
                        "code": 2001
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "InternalError": {
                    "summary": "Internal server error",
                    "value": {
                      "error": {
                        "type": "InternalError",
                        "message": "An unexpected error occurred while processing your request.",
                        "code": 9999
                      }
                    }
                  }
                }
              }
            }
          },
          "504": {
            "description": "Gateway timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "TimeoutError": {
                    "summary": "Request timed out",
                    "value": {
                      "error": {
                        "type": "TimeoutError",
                        "message": "API request timed out",
                        "code": 1005
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Error type."
              },
              "message": {
                "type": "string",
                "description": "Error message providing additional details."
              },
              "code": {
                "type": "integer",
                "description": "Specific error code."
              }
            }
          }
        },
        "required": ["error"]
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key",
        "description": "A unique key used for authentication to access the API."
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Standard Authorization header using the Bearer scheme. Example: 'Authorization: Bearer YOUR_API_KEY'"
      }
    }
  },
  "tags": [
    {
      "name": "Image Analysis",
      "description": "Endpoints related to image AI-generated content detection."
    },
    {
      "name": "Text Analysis",
      "description": "Endpoints related to text AI-generated content detection."
    }
  ]
}